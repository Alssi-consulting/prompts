matches:
  - trigger: ':promptTemplate'
    form: |
      # Goal
      "[[what_you_want_to_achieve_with_this_prompt]]"

      # Rules
      - "[[rule_1]]"
      - "[[rule_2]]"
      - "[[rule_3]]"

      # Steps
      1. "[[step_1]]"
      2. "[[step_2]]"
      3. "[[step_3]]"

      # Context
      [[describe_the_context_of_the_prompt]]

      # Input Example
      <inputExample>
      [[example_of_the_input_you_have]]
      </inputExample>

      # Output Example
      <outputExample>
      [[example_of_the_output_you_want_to_get]]
      </outputExample>
    form_fields:
      describe_the_context_of_the_prompt:
        multiline: true
      example_of_the_input_you_have:
        multiline: true
      example_of_the_output_you_want_to_get:
        multiline: true
  - trigger: ':promptOpt'
    form: |
      You are an **elite Prompt Engineer**.  
      Your job is to transform any "**shitty**" prompt into a **masterclass**.  
      Your role is to elevate any prompt to its **highest level of clarity and impact**.

      1. **Read** the prompt carefully and identify major weaknesses.  
         - Identify the **context**, the **desired role**, the **goal**, and potential **gaps**.
         - Find inconsistencies, ambiguities, duplications or missing details.
      2. **Explain** those weaknesses clearly.  
        - Use **bullet points** for each issue.
      3. **Suggest** concise, high-impact improvements.  
        - Use **bullet points** for each improvement.
      4. **Rewrite** a final version that is clear, focused, and achieves the goal.

      **Important**:
      - Do not be lazy, ALWAYS return the full prompt.

      **Rules**:  
      - Make sentences very short and impactful.
      - Be clear and concise.
      - Minimum markdown formatting.
      - Avoid emojis.
      - Keep examples minimal.  
      - Maintain or clarify original intent.
      - Answer in user's language.
      - Respect the original intent.
      - Simplify language or clarify style where necessary.
      - Add constraints (length, tone, format) if needed.
      - Use clear and short sentences.
      - Use actions verbs.
      - Use this structured output: goal, roles, context, rules, steps (recommends), (optional) input and output examples.
      - Provide very shorts but impactful details on the action the LLM needs to do.

      **Output Format**:  
      1. **Weaknesses**  
      2. **Suggested Improvements**  
      3. **Masterclass Prompt** (reply with your final result in block text formatted markdown surrounded by 4 backticks)

      **My original Prompt that needs to be improved**:
      <prompt>
      [[your_prompt]]
      </prompt>
    form_fields:
      your_prompt:
        multiline: true
  - trigger: ':featureUserStories'
    form: ''
  - trigger: ':featureUserStory'
    form: |+
      Goal: Please endorse Product Owner to write very good user stories for the developers team.

      Rules:

      - Do not generate code.
      - Ask me questions to understand the feature and being sure nothing is missing.
      - Be accurate and lean, concise questions, minimum words.
      - Group questions by section of 3 questions minimum.
      - Make user stories coherent and clear.
      - Sort them by priority of code.
      - When the user asks, write the user stories using the template under.
      - Output the template in markdown.

      Requirements:
      <requirements>
      [[feature_to_build_be_as_detailed_as_possible]]
      </requirements>

      Steps:

      1. Break down requirements into an user-stories list.
      2. Ask questions to understand the feature and being sure nothing is missing.
      3. Write the user stories using the template under formatted in markdown when ready.

      User stories template:

      ```markdown
      # Feature's name with Epic

      ## "User Story 1"

      **As a** [role]
      **I want** [action]
      **So that** [outcome]

      * Acceptance Criteria:
        * [ ] Given: ...
        * [ ] When: ...
        * [ ] Then: ...
        * [ ] And: ...

      ## "User Story 2"

      ...
      ```

    form_fields:
      feature_to_build_be_as_detailed_as_possible:
        multiline: true
  - trigger: ':featurePlanConstruction'
    form: |
      Goal:
      Create a technical plan for that only feature.

      Rules:
      - Split the user-story into relevant sections.
      - Fill the template with the user-story details.
        - Section: A feature's part grouped together because same goal. 
        - Tasks: The code implementation to do (using my current tech stack).
        - Action: The main action to do in 1 sentence.
      - Only wait for user approval before jumping to next process (see under).

      How to proceed:
      1. Split the user-story into relevant sections.
      2. Once agreed,  propose to apply the plan for section 1 only.
      3. Once agreed, ,propose to apply the plan for section 2.
      4. Repeat until all sections are done.

      User-Story from specs (delimited by ---):
      ---
      [[the_user_story_you_aime_to_build]]
      ---

      Template to use:
      ```markdown
      # User-Story name

      1 sentence summarize of the goal

      ## Section 1's name - a feature part

      ### Tasks (code implementation)

      - [ ] Action

      ### UI - Only in there is UI to build

      - [ ] Action

      ### Testing

      - [ ] Action
      ...
      ```
    form_fields:
      the_user_story_you_aime_to_build:
        multiline: true
  - trigger: ':docInstructions'
    form: |+
      # Goal
      You are the **AI Architect**, responsible for guiding the **Developer** in structuring precise instructions for the **AI Editor**. The **AI Editor** will use these instructions to generate code, and the **Developer** will review and refine everything before execution.

      # Roles & Responsibilities
      - **AI Architect (You)** → Helps structure the instructions.  
      - **Developer** → Refines, validates, and ensures correctness before sending instructions to the AI Editor.  
      - **AI Editor** → Uses the instructions to generate code.  

      # Rules
      - **Do NOT generate scripts or code**—only structured instructions.  
      - **All examples must be in a dedicated section** for clarity.  
      - **Every CLI command must be explicitly validated** before including it.  
      - **Instructions must be fully refined before passing them to the AI Editor.**  
      - **Explicit user confirmation is required at each step.**  

      # Section Processing

      For each section:

      ### **1. Define the Feature**
      1. Ask: **"Which feature should we build today? ☀️"**  

      ### **2. Validation Loop**
      1. **Exploration Loop**  
         - Ask the Developer three **progressive follow-up questions** to collect essential details.  
      2. **Explicit Validation Request**  
         - Ask: **"Once you're ready to proceed, only type 'GO'. Otherwise, I will ask three more questions to refine the details."**  
      3. **Loop Until Confirmation**  
         - **If the user does NOT Explicitly type 'GO'**, generate three **new** refining questions based on previous answers.  
         - **Repeat the cycle** until explicit validation is received.  
      4. **Exit Condition**  
         - When the user types **"Go"**, proceed to the next step.  

      ### **3. Structure the Plan**
      1. **Generate a bullet-point list** outlining the major steps required.  
      2. **User Confirmation:**  
         - Ask: **"Do you agree with this plan? (YES/NO)"**  
         - If **NO** → Adjust until confirmed.  

      ### 4. Affect roles
      1. Now that we have a plan, split it in two parts.
      2. The first part is for the Developer (for configuration and task that need to be performed manually).
      3. The second part is for the AI Editor (for setup and code execution).

      ### **4. Fill the Instruction Template**
      1. **Complete all sections** methodically using **concise bullet points**.  
      2. **Ensure URLs, commands, and references are verified.**  
      3. **User Confirmation:**  
         - Ask: **"Is the template correct? (YES/NO)"**  
         - If **NO** → Refine and repeat.  

      ### **5. AI Architect Review**
      1. Independently check for:  
         - **Completeness** → Are all key details covered?  
         - **Correctness** → Are dependencies, versions, and steps accurate?  
         - **Clarity** → Is the instruction unambiguous?  
      2. **Propose improvements in bullet points.**  
      3. **User Confirmation:**  
         - Ask: **"Would you like to integrate these suggestions? (YES/NO)"**  
         - If **NO** → Keep as is.  
         - If **YES** → Apply the changes.  

      ### **6. Final Developer Validation**
      - Ask: **"Is this final and ready for execution? (YES/NO)"**  
      - If **NO** → Iterate until fully approved.  

      ---

      # **Instruction Template**
      - Use **Markdown headings** (`#`, `##`, `###`) for structure.  
      - Use **bullet points** instead of paragraphs.  
      - **Replace placeholders** (`{{variables}}`) with actual user inputs.  
      - **Sections must not be removed**—additional sections can be added if necessary.  

      ```markdown
      # Instruction: {{title}}

      ## Rules
      - Examples (including CLI) **must be verified** before execution.  
      - **Every step MUST be completed and validated** before proceeding.  

      ## Goal
      {{goal}}

      ### Global Steps  
      1. {{step1}}  
      2. ...  

      ## Guidelines  

      ### Requirements  
      - {{requirement1}}  
      - ...  

      ### Constraints  

      #### {{constraint1}}  
      - {{constraint1-explanation}}  
      - ...  

      ## Steps  

      ### {{step1}}  
      - Online documentation: [link]({{markdown_link}})  
      - Goal: {{goal}}  
      - Steps:  
        1. {{step1}}  
        2. {{step2}}  
      - Expected output: {{output}}  
      - Example (if any): {{example}}  

      ## Verifications  
      - Ensure the **goal is achieved optimally**.  
      - Check that **nothing is buggy, missing, or incorrect**.  

      1. {{verification1}}  
      2. ...  
      ```

  - trigger: ':featureInstructions'
    form: |
      Goal:
      [[what_you_want_to_achieve_with_this_prompt]]

      Context:
      You (the "AI Architect") have already gathered all user requirements and must produce a single, detailed plan for the "AI Editor".
      This plan explains exactly which code to generate or modify (for instance, to create a VS Code extension, add a new feature, or fix a bug).
      The Developer (human) will copy/paste these instructions into the "AI Editor"'s prompt.

      Roles:  
      - AI Architect: Generates the technical plan only (no code).  
      - AI Editor: Implements the plan by generating or modifying code.  
      - Developer (me): Validates the plan and coordinates both IAs.

      What to Include:  
      - Detailed breakdown of each file, folder, or feature required.  
      - Exact file/folder names, function or class stubs, relevant data structures, placeholders for environment variables.  
      - Step-by-step explanations so the AI Editor knows precisely what to create or modify.  
      - Markdown formatting (for the generated prompt) with quadruple backticks (````) for clarity—no code, just instructions.

      Prompt for the "AI Architect“ (write a "technical plan" only, no code):
      1. Greet the user, english only, acknowledging all requirements have been finalized. No further specification gathering is needed.  
      2. Immediately produce a step-by-step plan describing what code the AI Editor must generate or modify:  
         - Outline file names and folder structure.  
         - Explain the purpose of each file or component.  
         - Indicate which lines or blocks of code to add or modify (in a generalized, descriptive way).  
         - Highlight any dependencies or environment variables.  
         - Provide instructions for building or testing if applicable.  
         - Provide discussions choices to ensure the "AI Editor" will NOT go the wrong way.
      3. Output the entire plan in a single Markdown block surrounded by quadruple backticks (````).  
      4. Conclude by reminding the Developer to validate the instructions before passing them on to the AI Editor.

      Important:
      Before answering the user, make sure the plan is doable. If not, ask the user to clarify or adjust the requirements.
    form_fields:
      what_you_want_to_achieve_with_this_prompt:
        multiline: true
  - trigger: ':featureCreate'
    form: "Goal:\nBuild a new, existing or not, feature in our project.\n\nRules:\n- We proceed in **4 phases** (Specifications, Architecture, Action Plan, Final Export).\n- On 1st prompt, print 4 main phases with this one single line formatted as: \"Phase's title : Objective\".\n- Start directly with Phase 1.  \n\n---\n\n## Process Overview\n\n### Phase 1: \U0001F9E0 Gather Specifications\n- **Objective**: Obtain project requirements and clarify purpose, features, constraints, and environment needs.\n- **Actions**:\n  - All questions must be a concise, single line.\n  - Ask targeted questions to confirm:\n    - Functional requirements.\n    - Chosen technologies, tools, or libraries (including **versions**).\n    - When discussing tech, assert that used versions match the requirements.\n    - Constraints (modularity, scalability, guidelines).\n    - Environment setups (API tokens, configuration files).\n    - Testing, Documentation, and CI/CD requirements.\n- **Output**:\n  - A validated list of specifications.\n\n**Important**: Do not move to Phase 2 until the explicitly user confirms Phase 1.\n\n---\n\n### Phase 2: \U0001F9F1 Define or Refine Architecture\n- **Objective**: Collaboratively create or adjust the project's architecture.\n- **Actions**:\n  - Specify folder structures, naming conventions, and core components (e.g., commands, utilities, events).\n  - Define environment variables (with placeholder values).\n  - Ensure modularity, scalability, and maintainability.\n  - Check in the knowledge base if an architecture already exists. Then:\n   - If you do have one, confirm with the user, confirm first it is up-to-date.\n   - If you don't know it, ask the user to provide it.  \n   - If it doesn't exist, the user will let you know.  \n  - An updated (or newly created) architecture plan, ready for Markdown export.\n  - If architecture already exists, only print affected files/folders (already existing or to be created).\n\n**Important**: Do not move to Phase 3 until the user confirms Phase 2.\n\n---\n\n### Phase 3: \U0001F5C2️ Develop a Detailed Plan of Actions\n- **Objective**: Outline each step to implement and configure the architecture.\n- **Rules**:\n  - Not git actions, only technical steps.\n  - No code generation, only setup instructions.\n  - No assumptions, no \"not needed\" steps.\n  - concentrate exclusively on the feature to be implemented, eg: do not mention naming conventions or code style.\n  - Follow only the precise instructions and never install additional libraries unless explicitly requested.\n  - Do not give code or commands to execute (e.g., `mkdir ...`); instead, say “create the new files/folders xxx.”\n- **Actions**:\n  - **Configuration Tasks**: External dependency setup, token generation, key management, environment variables.\n  - **Technical Setup**: Initializing the project, installing dependencies, creating files/folders.\n  - Ensure each step is concise, bullet-pointed, and verified for successful compilation or runtime.\n- **Output**:\n  - A validated, step-by-step action plan.\n  - Be sure everything discussed on \"Phase 1\" is covered entirely.\n\n**Important**: Do not move to Phase 4 until the user confirms Phase 3.\n\nBefore going to phase 4, review the plan to check that good practices are enforced and plan is correct regarding the specifications.\n\n---\n\n### Phase 4: \U0001F9D1‍\U0001F4BB Export in Markdown\n- **Objective**: Produce a final Markdown document suitable for the “developer” and the “AI Editor.”\n- **Rules**: \n  - Phase 4 must be answered in markdown format on a text block with 4 backticks.\n  - Avoid repetition and focus only on the essentials.\n  - No code generation or example but provide instructions on what to do.\n  - Provide this phase in english.\n- **Actions**:\n  - **Sections**:\n    1. **Actions for the \"developer\"**:\n      - He should not touch the codebase, only external services that requires configuration.\n      - Only **Configuration Tasks** (from Phase 3)\n    2. **Actions for the \"AI Editor\"**:\n      - Explain in a short sentence the feature and summarize what do we want to code.\n      - Is doing most of the work, it codes everything and change architecture if needed.\n      - **Architecture** (from Phase 2): folder structure, components, environment variables etc.\n      - **Technical Setup Instructions** (from Phase 3).\n      - Give the instructions being very clear but concise, do not be very detailed, just the necessary.\n      - **Output in english language.**\n      - Add these custom instructions at the end of the document:\n        - Never install additional libraries\n        - Strictly follow the provided instructions\n        - Follow plan in order, no skipping steps\n        - Always adapt to current project rules and structure\n        - Do all steps without asking\n        - Always start with package installation if necessary\n        - Use proper versions from package manager\n        - Respect conventions, like naming and existing code patterns\n  - **Formatting**:\n    - Keep instructions concise, accurate, and actionable.\n    - Use numbered bullet points to list steps.\n  - **No examples**—strictly provide mandatory instructions.\n\n**Important**: Conclude only after Phase 4 is validated.\n\n---\n\n## **Instructions**\n1. **Start by outlining these four phases** to the user, confirming they understand the process.\n2. **Phase-by-phase approach**:\n   - Always request and validate user input for each phase before proceeding.\n   - **Never skip or combine phases**.\n3. **Never generate code**—you are the Architect, not the code generator.\n4. The final **Markdown document** must be separated into the sections listed under Phase 4.\n\n---\n\n## **Expected Final Output**\nWhen all phases are complete, you will produce a **Markdown document** containing:\n\n1. **Guide for the Developer**:\n   - Validated specifications and project goals.\n   - Configuration tasks (external dependencies, tokens, etc.).\n2. **Guide for the AI Editor**:\n   - A strictly defined technical plan and instructions (folder structure, environment variables, setup steps).\n"
  - trigger: ':featureCode'
    form: |
      Goal:
      Generate code for a feature based on existing codebase.

      Requirements:
      <requirements>
      [[requirements]]
      </requirements>

      Rules:
      - Acknowledge it.
      - Reformulate in bullet point grouped by section to show me that you understood what to do.
      - Generate development steps (based on my codebase).

      Output example:
      <outputExample>
      Feature to code: ...

      Development steps:

      1. ...
      2. ...
      3. ...

      Plan:

      Step 1: ...

      Sub step 1.1: ...

      ...
      </outputExample>
    form_fields:
      requirements:
        multiline: true
  - trigger: ':projectBootstrap'
    form: "## Goal  \nYour objective is to **guide the developer through a structured decision-making process**, validating each step, resolving contradictions, and providing a **final architecture summary** with a **detailed folder structure**.\n\n## Roles\n- \"AI Architect\": You, the AI, will guide the user (me) through the process.\n- \"Developer\": The user (me) will provide the project description and answer your questions.\n\n## Context\nYou will load the knowledge base to get information about the project.\nThen, ask the user for missing information.\nYou must follow the \"Process\" section under and ask the question to the user.\nThe user will provide to you the answer, with a load of information.\nYour job is to analyze the answer, ask questions and refine the architecture, step by step.  \n\n## Rules  \n- **Check the existing knowledge database file** before proceeding.  \n- **Analyze** the project thoroughly.  \n- **Break down** the architecture into key sections.  \n- **Ask only necessary questions** (adaptive, not excessive).\n- **Focus** only on the current section, DO NOT ASK QUESTIONS that will be asked later in the process.\n- **Validate** each choices the user makes to be sure this is relevant.\n- **No implementation details** in you answer, focus on making the best choices.\n\n## Steps to follow right after first message\n\n1. List documents loaded from knowledge base.\n2. Detail to the user the big steps we will do (only the titles -- e.g. \" 2. \U0001F680 **Hosting** & Deployment – Deciding on hosting, orchestration, CI/CD, and scaling strategy.\").\n3. Then, ask the user if he is ready to start.  \n\n### Section Processing\n\nThis is very **IMPORTANT**, you must follow this process to ensure the best result.\n\nFor each section:\n1. **Pre-fill Information**\n   - Review the knowledge base documents\n   - Present any found information in parentheses to the user\n   - Example: \"What type of application is it? (e.g., SaaS, internal tool, e-commerce, real-time system) -- (Found: SaaS)\"\n\n2. **Interactive Discussion**\n   - Ask focused questions about missing information\n   - Seek clarification on features and constraints\n   - Guide user through decision-making process\n   - Please discuss with the user and make sure you have all the information you need before proceeding to the next step.\n\n3. **Section Completion**\n   - Present a concise summary of decisions\n   - Review for consistency and completeness\n   - Explicitly ask: \"Do you confirm we can proceed to the next section? (Please respond with 'YES')\"\n   - Wait for explicit \"YES\" confirmation, DO NOT PROCEED TO THE NEXT SECTION IF NOT STRONGLY CONFIRMED.\n\n4. **Summarization**\n   - Summarize all gathered information in a markdown text block (surrounded by 4 backticks)\n   - Include all decisions and rationale\n   - Format for clarity and future reference\n   - Ask if this is correct, and wait for explicit \"YES\" confirmation\n\n5. **Progress**\n   - Only after completion, move to the next section\n   - Maintain structured progression through all sections\n\n---\n\n## Process\n\n- Prefill the answer for the user with gathered info from knowledge base in parenthesis.\n- Then, ask the user for missing information.\n\n### \U0001F3AF 1. Needs & Constraints Verification\n- What is the **goal of the project**?  \n- What type of application is it? (e.g., SaaS, internal tool, e-commerce, real-time system)  \n- What are the **main features and functionalities**?  \n- Who are the **target users**? (e.g., general public, enterprise clients, internal employees)  \n- Are there **any external integrations** required? (e.g., third-party APIs, payment gateways, authentication providers)  \n---\n\n### \U0001F680 2. Hosting & Deployment\n- Where will the project be hosted? (e.g., cloud, on-prem, hybrid)  \n- Is **orchestration** needed? (e.g., Kubernetes vs. serverless)  \n- How should CI/CD be structured?  \n- **Which Infrastructure as Code (IaC) tool should be used?** (e.g., Terraform, AWS CDK, Pulumi)  \n- Expected **scale and traffic volume**?\n\n---\n\n### ⚙️ 3. Back-End Design\n- Which **back-end framework** should be used? (e.g., NestJS, FastAPI, Spring Boot)  \n- Should we apply **Domain-Driven Design (DDD)**?  \n- How should database access be organized? (e.g., ORM, Repository Pattern)  \n- Are there any **scalability concerns** (e.g., horizontal scaling, multi-threading needs)?  \n\n---\n\n### \U0001F3A8 4. Front-End Design\n- What **front-end framework** should be used? (e.g., React, Vue, Angular)?  \n- Should the application be **Single Page Application (SPA), Server-Side Rendered (SSR), or hybrid**?  \n- What **styling approach** should be used? (e.g., CSS-in-JS, SCSS, Tailwind)?  \n- How should state management be handled? (e.g., Redux, Zustand, Vuex)?  \n\n---\n\n### \U0001F4BE 5. Data & Database Management\n- Should we use **SQL or NoSQL**? Why?  \n- What **database engine** should be used? (e.g., PostgreSQL, MySQL, MongoDB, DynamoDB)?  \n- How should **schema versioning & migrations** be handled? (e.g., Liquibase, Flyway, Prisma)?  \n- Should multi-tenancy be supported?  \n- How should we ensure **performance optimization**? (e.g., indexing, caching, partitioning)?  \n- What are the **consistency requirements**? (e.g., eventual vs. strong consistency)?  \n- Is there any **search engine** to use? (e.g., Elasticsearch, OpenSearch, Meilisearch)\n\n---\n\n### \U0001F4E8 6. Event & Asynchronous Flow Management\n- Do we need **asynchronous processing**? If so, for what use cases?  \n- What **event mechanisms** should be used? (e.g., Kafka, RabbitMQ, WebSockets, AWS SQS)?  \n- Should **event sourcing or CQRS** be implemented?  \n- How should **message delivery guarantees** be handled? (e.g., retries, dead-letter queues, idempotency)?  \n\n---\n\n### 7 8. Security & Performance  \n- Should we use **validation libraries**? (e.g., Joi, Zod)  \n- What **authentication and authorization mechanisms** should be implemented? (e.g., OAuth2, JWT)  \n- Are there **sensitive data** requiring encryption?  \n- How can we optimize **latency and queries**?  \n- What **caching mechanisms** should be used? (e.g., Redis, CDN, HTTP/2)  \n\n---\n\n### \U0001F4CA 8. Observability & Maintenance  \n- What **logging and monitoring tools** should be integrated?  \n- How should **alerts and incidents** be managed?  \n- How can we ensure **zero-downtime updates**?  \n\n---\n\n### \U0001F4C1 9. Folder Structure & Project Organization  \n- What **project organization pattern** should be followed? (e.g., modular monolith, feature-based, domain-based)?  \n- How should **backend services** be structured? (e.g., clean architecture, hexagonal architecture, microservices)?  \n- How should **frontend components** be organized? (e.g., feature-based, atomic design, MVC)?  \n- What is the **preferred structure for configuration, environment files, and secrets**?  \n\nNotes for the \"AI Architect\":\n- Asserts all information from the user are correct by validating with the user.\n- Generate full folder structure, with all files and folders for all sections.\n- Print the folder structure in a markdown text block (surrounded by 4 backticks).\n- Do not comments unless asked.\n"
  - trigger: ':projectEnforce'
    form: "## Goal  \nAssist in setting up best practices for a newly created project through **step-by-step validation** and implementation. Each phase must be validated before proceeding to the next.\n\n## Roles  \nYou are a DevOps and software engineering expert. Guide the user in selecting, validating, and implementing best practices with automation.\n\n## Process & Validation Steps  \n\n### 1️⃣ Understanding the Project  \n- Clarify project type, technologies, versions, and architecture.\n- Identify constraints (legacy dependencies, CI/CD tools).  \n- Confirm understanding before proceeding.  \n\nUser must **explicitly validate** this step before moving forward.  \n\n---\n\n### 2️⃣ Selecting Best Practices & Tools  \n\nEach tool is implemented **one by one** with detailed instructions.\nThe implementation of a tool **must be validated** before moving to the next.\n\nRules:\n- **Installation:** Provide the exact commands.  \n- **Configuration:** Detail how to set up required configuration files.  \n- **Best Practices:** Explain usage guidelines and potential issues.  \n- **Validation:** Ensure the setup is functional before moving to the next tool. \n\nSteps: \n1. For each category, propose the **top 5** tools based on industry standards based on the developer's stack.\n2. Explain **pros and cons** in a table, mention if a tool covers multiple needs, and guide the user in making an informed choice.  \n3. Each section MUST BE **validated independently** before going to the next. Example: On start, treat \"Code Quality & Standards\" with section \"Format\" only, then pass to \"Linting\", \"Commit Convention\" etc.\n4. Finally, ask the user \"Do you confirm the tools selected for each section?\". He must say \"YES\" to processed.\n5. Once validated: **IMPORTANT** - Summarize all gathered information in a markdown text block (surrounded by 4 backticks)\n  - Translate in english.\n  - Include all decisions, rationale and chosen implementation\n  - Include configuration files, setup steps, and integration guidelines\n  - Format for clarity and future reference\n6. Ask if this is correct, and wait for explicit \"YES\" confirmation\n\n#### \U0001F50D 1. Code Quality & Standards  \n- **Format:** Propose formatting tools\n- **Linting:** Suggest linters based on the tech stack\n- **Commit Convention:** Recommend tools to enforce structured commits\n\n#### \U0001F4E6 2. Versioning & Release Management  \n- **Semantic Versioning (SemVer):** Present versioning strategies or tools.  \n- **Changelog Generation:** Suggest tools.\n- **Tagging Releases:** Recommend solutions for automated tagging.  \n\n#### \U0001F680 3. CI/CD & Automation  \n- **Pre-commit hooks:** List tools for pre-commit checks.  \n- **Pre-merge validation:** Provide CI solutions ensuring validation before merging.  \n- **CI/CD Pipeline:** Offer robust CI/CD solutions that fit the project stack.  \n- **Container Tool**: Recommend containerization tools.\n\n#### \U0001F512 4. Security & Monitoring  \n- **Security Audits:** Recommend tools for dependency and runtime security.  \n- **Code Coverage:** Suggest tools for tracking test coverage.  \n- **Dependencies update**: Offer solutions for automated dependency updates.\n\n#### \U0001F4DA 5. Documentation & Collaboration  \n- **API Documentation:** Recommend documentation generators.  \n- **Project Documentation:** Offer solutions for maintaining structured documentation.  \n\n#### \U0001F465 6. Code Review \n- **Code Review:** Recommend tools for code review.\n- **AI Code Review:** Recommend tools for code review that use AI.  \n\n---\n\n### 3️⃣ Optional Enhancements  \nUser decides which enhancements to implement. Each selected enhancement follows the **same step-by-step process** as mandatory tools.  \n\n#### Code Quality & Standards  \n- Dead code detection.  \n- Unused dependency detection.  \n\n#### Versioning & Release Management  \n- Automated package publishing.  \n- Lockfile maintenance.  \n\n#### CI/CD & Automation  \n- Multi-environment deployments.  \n- Rollback strategy.  \n- Automatic branch cleanup.  \n\n#### Security & Monitoring  \n- Secret scanning.  \n- Container security scanning.  \n- License compliance checks.  \n\n#### Documentation & Collaboration  \n- Architecture documentation.  \n- Automated diagram generation.  \n\nEach selected enhancement is **fully implemented before moving to another**.  \n\n---\n\n## Output Format  \n1. **Phase 1: Understanding the project** → Confirm details before proceeding.  \n2. **Phase 2: Selecting best practices & tools** → Validate tool choices **per category** before proceeding.  \n3. **Phase 3: Optional enhancements** → Implement only if approved, using the same process.  \n\nThis ensures a structured, interactive, and high-quality project setup.\n"
  - trigger: ':projectURL'
    form: "## Goal  \nYour objective is to **help the developer structure the URL and API architecture**, ensuring a **clear, secure, and optimized system**.  \nYou will validate each step, resolve contradictions, and provide a **final URL structure summary** with all necessary parameters and error-handling strategy.\n\n## Roles  \n- \"AI Architect\": You, the AI, will guide the user (developer) through the process, acting as a Expert Software Architect. \n- \"Developer\": The user (developer) will provide project details and answer your questions.  \n\n## Context  \nYou will load the knowledge base to retrieve project information.  \nThen, ask the user for missing details.  \nYou must follow the **Process** section below and ask the user **only the relevant questions**.  \nThe user will provide detailed answers, and you will analyze, refine, and optimize the URL and API structure step by step.  \n\n## Rules  \n- **Check the existing knowledge base file** before proceeding.  \n- **Analyze** the project thoroughly.  \n- **Break down** the URL structure into key sections.  \n- **Ask only necessary questions** (adaptive, not excessive).  \n- **Focus only on the current section**, do not ask questions that belong to a later section.  \n- **Validate** each user choice to ensure relevance.  \n- **No implementation details in your responses**, focus on making the best structural choices.  \n\n## Steps to follow right after the first message  \n\n1. **List documents loaded from the knowledge base**.  \n2. **Provide an overview of the process steps** (only titles).  \n3. **Explain that section processing consists of 5 steps**.\n4. **Ask the user if they are ready to start**.  \n\n### Section Processing in 5 steps\n\nThis is very **important**, you must follow this process to ensure the best result.  \n\nFor each section, follow these 5 steps:\n\n1. **Pre-fill Information**  \n   - Review the knowledge base documents.  \n   - Present any found information in parentheses to the user.  \n   - Example: \"Should the user ID be present in the URL? (Found: Yes, required for private pages)\"  \n\n2. **Interactive Discussion**  \n   - Ask focused questions about missing information.  \n   - Seek clarification on URL conventions and API design.  \n   - Guide the user through the decision-making process.  \n   - Discuss with the user and ensure all required details are gathered before proceeding.  \n\n3. **Section Completion**  \n   - Present a concise summary of decisions.  \n   - Review for consistency and completeness.  \n   - Explicitly ask: \"Do you confirm we can proceed to the next section? (Please respond with 'YES')\"  \n   - Wait for explicit \"YES\" confirmation.\n   - **Do not export the section without strong confirmation**.  \n\nImportant:\n- **Loop Until Confirmation**  \n   - **If the user does NOT Explicitly type 'GO'**, generate three **new** refining questions based on previous answers.  \n   - **Repeat the cycle** until explicit validation is received.  \n   - **Validation must be explicit**, ask the user \"Do you confirm we can proceed to the next section? (Please respond with 'GO')\".\n\n4. **Summarization just after a section completion and user validation**  \n   - Summarize all gathered information in a markdown text block (surrounded by four backticks).  \n   - Include all decisions and rationale.  \n   - Format for clarity and future reference.\n   - Do not skip any details, output in short bullet points.\n   - **Always export the whole section's conversation to avoid forget details.**\n   - Ask if this is correct and wait for explicit \"YES\" confirmation.  \n\n5. **Progress**  \n   - Only after completion, move to the next section.  \n   - Maintain structured progression through all sections.  \n\n---\n\n## Process  \n\n- Prefill the answer for the user with gathered information from the knowledge base in parentheses.  \n- Then, ask the user for missing information.  \n\n### \U0001F3AF 1. Project Context & Objectives  \n- What are the main categories of routes to define (public, private, admin)?  \n- Define the pages that need to be created (e.g., home, about, contact etc.).\n\n---\n\n### \U0001F310 2. Frontend URL Structure  \n- Define **URL naming conventions** (default: Kebab Case, e.g., `/user-profile` instead of `/userProfile`).  \n- Structure **path parameters vs. query parameters**.  \n- Define **public vs. private vs. admin routes**.  \n- Ensure **URL consistency with SEO best practices**.  \n- Confirm that URLs **do not contain unnecessary sensitive data**.  \n\n---\n\n### \U0001F50C 3. Backend API Design  \n- Should the API use **REST, GraphQL, or both**?  \n- Define the **URL structure for REST APIs** (e.g., `/api/v1/users/{id}` vs. `/api/v1/user-profile/{id}`).  \n- Establish **conventions for nested resources** (e.g., `/users/{id}/orders`).  \n- Define **pagination and filtering parameters** (`?page=2&limit=10`).  \n- Determine **how to structure API versioning** (`/api/v1/...`).  \n- Define **batch processing endpoints** for bulk operations.  \n\n---\n\n### \U0001F512 4. Security & Access Management  \n- Define **user roles and permissions** (admin, user, guest).  \n- Ensure **private routes are properly protected**.  \n- Implement **rate limiting and abuse protection**.  \n- Define **authentication methods** (JWT, OAuth, API keys).  \n- Handle **temporary session URLs** when necessary.  \n\n---\n\n### ⚠️ 5. Error Handling & HTTP Status Codes  \n- Define **consistent error responses** (structured JSON).  \n- Implement standard **HTTP status codes**:  \n  - `200 OK` – Successful request  \n  - `201 Created` – Resource successfully created  \n  - `400 Bad Request` – Invalid request data  \n  - `401 Unauthorized` – Missing or invalid authentication  \n  - `403 Forbidden` – Access denied  \n  - `404 Not Found` – Resource does not exist  \n  - `429 Too Many Requests` – Rate limiting applied  \n  - `500 Internal Server Error` – Unexpected server issue  \n\n---\n\n### \U0001F680 6. Performance & Caching Strategy  \n- Define **which routes should be cached on the frontend**.  \n- Implement **backend caching for expensive queries**.  \n- Set **ETag and Cache-Control headers** for optimization.  \n- Define **how long different responses should be cached**.  \n\n---\n\n### \U0001F4CA 7. Monitoring & Scalability  \n- Implement **API request logging and monitoring**.  \n- Ensure **audit logs track API usage and access**.  \n- Define **strategies for API scaling** (load balancing, CDNs).  \n- Implement **error tracking and alerting mechanisms**.  \n"
  - trigger: ':dbStructure'
    form: |+
      # Prompt Structured for Data Schema & Generation

      ## Goal  
      Your objective is to **guide the developer through a structured database design process**, validating each step, resolving contradictions, and providing a **final schema summary** with a **Mermaid class diagram and sample dataset**.

      ## Roles  
      - "AI Architect": You, the AI, will guide the user (developer) through the process action as a Database Architect. 
      - "Developer": The user (developer) will provide project details and answer your questions.  

      ## Context  
      You will load the knowledge base to retrieve project information.  
      Then, ask the user for missing details.  
      You must follow the **Process** section below and ask the user **only the relevant questions**.  
      The user will provide detailed answers, and you will analyze, refine, and optimize the schema step by step.  

      ## Rules  
      - **Check the existing knowledge base file** before proceeding.  
      - **Analyze** the project thoroughly.  
      - **Break down** the schema into key sections.  
      - **Ask only necessary questions** (adaptive, not excessive).  
      - **Focus only on the current section**, do not ask questions that belong to a later section.  
      - **Validate** each user choice to ensure relevance.  
      - **No implementation details in your responses**, focus on making the best design choices.  

      ## Steps to follow right after the first message  

      1. **List documents loaded from the knowledge base**.  
      2. **Provide an overview of the process steps** (only titles).  
      3. **Ask the user if they are ready to start**.  

      ### Section Processing  

      This is very **important**, you must follow this process to ensure the best result.  

      For each section:  

      1. **Pre-fill Information**  
         - Review the knowledge base documents.  
         - Present any found information in parentheses to the user.  
         - Example: "What type of application is it? (e.g., SaaS, internal tool, e-commerce, real-time system) -- (Found: SaaS)"  

      2. **Interactive Discussion**  
         - Ask focused questions about missing information.  
         - Seek clarification on features and constraints.  
         - Guide the user through the decision-making process.  
         - Discuss with the user and ensure all required details are gathered before proceeding.  

      3. **Section Completion**  
         - Present a concise summary of decisions.  
         - Review for consistency and completeness.  
         - Explicitly ask: "Do you confirm we can proceed to the next section? (Please respond with 'YES')"  
         - Wait for explicit "YES" confirmation. Do not proceed without strong confirmation.  

      4. **Summarization**  
         - Summarize all gathered information in a markdown text block (surrounded by four backticks).  
         - Only use emoji for the section title.
         - Include all decisions and rationale.  
         - Format for clarity and future reference.  
         - Ask if this is correct and wait for explicit "YES" confirmation.  

      5. **Progress**  
         - Only after completion, move to the next section.  
         - Maintain structured progression through all sections.  

      ---

      ## Process  

      - Prefill the answer for the user with gathered information from the knowledge base in parentheses.  
      - Then, ask the user for missing information.  

      ### 1. Project Context & Requirements  
      - What is the **context of the project**? (e.g., e-commerce, SaaS, social network)  
      - What **types of data** will be stored? (e.g., users, products, orders)  
      - What is the **expected data volume**? (hundreds, thousands, millions of rows?)  
      - What are the **most frequent operations**? (read, write, update, delete)  
      - **SQL or NoSQL?**  

      ### 2. SQL vs. NoSQL Specifics  
      #### If SQL  
      - Are there **complex relationships** to manage? (frequent joins, strict constraints)  
      - Any **specific constraints**? (`UNIQUE`, `DEFAULT`, `FOREIGN KEY`)  

      #### If NoSQL  
      - How should data be **organized**?  
        - **Embedding** (storing related data in a single document)  
        - **Referencing** (using IDs to avoid duplication)  
      - What is the **strategy for fast data access**? (e.g., partitions, separate collections)  

      ### 3. Entity & Relationship Definition  
      - What are the **main objects** in your project? (e.g., users, articles, orders)  
      - What **fields** should be stored for each entity? (e.g., name, email, price, date)  
      - How are entities **related**?  
        - **1-1** (One user has one profile)  
        - **1-N** (One user can have multiple orders)  
        - **N-N** (One product can be ordered by multiple users)  
      - Do you need to **store files or images**? (Yes/No)  
      - Should an **audit log or history of changes** be stored? (Yes/No)  

      **This is the most important section to validate with the user.**

      Important:
      - **Loop Until Confirmation**  
         - **If the user does NOT Explicitly type 'GO'**, generate three **new** refining questions based on previous answers.  
         - **Repeat the cycle** until explicit validation is received.  
         - **Validation must be explicit**, ask the user "Do you confirm we can proceed to the next section? (Please respond with 'GO')".

      ### 4. Generating a Mermaid (Class) Diagram  
      - **Generate an initial Mermaid diagram based on responses**.  
      - **Display it to the user and ask for confirmation**.  
      - **Allow modifications if necessary**.  
      - **Validate the final structure before proceeding**.  

      ### 5. Performance & Indexing  
      - What **fields will be frequently searched**?  
      - What **normalization level** is needed?  
        - **1NF**: No duplicate data in columns.  
        - **2NF**: Avoid redundant fields unrelated to the primary key.  
        - **3NF**: No transitive dependencies.  
      - **If NoSQL**, should data be structured to avoid **heavy queries**?  

      ### 6. Generating Fixtures (Test Data)  
      - Do you need **test data**? (Yes/No)  
      - How much data is needed?  
        - **10 examples** (unit tests)  
        - **1,000 rows** (performance testing)  
        - **Millions** (production simulation)  
      - **Preferred method for data generation**:  
        - **Faker.js** (Node.js)  
        - **Factory Bot** (Rails)  
        - **Pytest Fixtures** (Python)  
        - **Raw SQL (`INSERT INTO ...`)**  

      ### 7. Finalization & Output  
      Once all questions are answered, the AI automatically generates:  
      - Print the final output in a markdown text block (surrounded by four backticks).  

      #### Sections to generate
      Please ensure every discussion you had with the user is included in the final output.

      1. The list of choices made together, summarized in a short numbered list.
      2. For each sections filled, generate:
        1. Generate the full schema with all entities and relationships -> **the validated Mermaid diagram**.  
        2. **An optimization plan for indexing and normalization**.  
        3. **A instructions (only, no code) dataset for testing (fixtures)**.  

  - trigger: ':dbGenSQL'
    form: |
      Goal:
      Generate SQL schema from specifications.

      Rules:
      - Generate the full SQL schema with :
        - tables
        - columns
        - relations between the tables
        - constraints

      Specifications:
      <specifications>
      [[entity_list_and_relations_between_entities]]
      </specifications>
    form_fields:
      entity_list_and_relations_between_entities:
        multiline: true
  - trigger: ':dbGenEntity'
    form: |
      Goal:
      Create entities from SQL Schema generating "[[objects___types___interfaces]]".

      SQL Schema:
      <sqlSchema>
      [[sql_schema]]
      </sqlSchema>

      Rules:
      1. For each entity, ensure you generate the corresponding type.
      2. For each relation, ensure relation is correctly defined.
      3. No comment in code.
      4. Suffix the type name with "Entity".
    form_fields:
      sql_schema:
        multiline: true
      objects___types___interfaces:
        type: list
        values: |-
          objects
          types
          interfaces
  - trigger: ':codeFake'
    form: |
      Goal:
      Generate a new variable filled with fake data.

      Rules:
      - Fill all fields with valid values.
      - Type of the data must be respected.
  - trigger: ':imageExtractDetails'
    form: |
      Goal:
      Extract details from image and match components in the codebase.

      Steps:
      1. Analyze the image, then extract information about the image.
        - Match the information with the components in the codebase.
        - From every extracted info (eg: button name), match the components' parameters (eg: name from button.tsx)
      2. Identify: changing state and actions that must be handled by functions.
        - If you are not sure about what you identified, ask me the relevant questions.
        - Then, continue with the next step.
      3. Bind actions from the image with existing functions in the codebase.
        - Use feature folder.
      4. Generate code from the information extracted.
        - Extract positions and sizes for each UI elements in the image (padding, margin, alignment, font size, etc.)
        - Generate code to implement the design from the image
        - Do not use external library, use existing codebase.
        - Create local components if necessary.

      Context:
      - Component folder: @
      - Feature folder: @
      - Image is attached.
  - trigger: ':debugIssues'
    form: |
      Goal:
      Find the issue in the given code context.

      Given: "[[state]]".
      When: "[[action]]".
      Then: "[[expected_result]]".

      Instead, I get the following:
      <error>
      [[result_behavior_error_logs_or_your_analysis]]
      </error>

      Steps:
      1. Analyze the given code
      2. Then list potentials issues and steps to fix the code
      3. Sort them by relevance
      4. Provide a top 3 root level possible causes
      5. When answering the user, list what you tried so far and the possible next 3 causes

      Notes:
      - Issues might be induced by another part of the code, so you might need to check the whole codebase.
    form_fields:
      result_behavior_error_logs_or_your_analysis:
        multiline: true
  - trigger: ':debugLog'
    form: "Goal:\nAdd logging messages to the given code at each significant step.\n\nRules:\n- Use an appropriate emoji at the start of each log message for better visualization.\n- Annotate the code by adding logging messages at each significant step, including within inner functions.\n- Each log message must use a suitable emoji representing the step it corresponds to— for instance:\n  - \U0001F6E0️ **Action Step** (When a particular action is being performed)\n  - ✅ **Confirmation Step** (Verifying or completing an action)\n  - \U0001F504 **Calling Function** (Log inner function calls)\n  - ⚠️ **Handling Errors** (If logging at the point of error handling)\n- Each message must be descriptive to help in easy debugging of errors.\n- Ensure loggings are descriptive enough to aid in debugging but not too verbose as to overwhelm output.\n- Log points should include function calls, iteration starts, important decisions, error handling, and final steps.\n- The focus should be on enhancing clarity without compromising code functionality.\n"
  - trigger: ':debugInconsistency'
    form: |
      Goal:
      Review the given code and identify all inconsistencies. 

      Check for inconsistencies in:
      - Variable names (naming conventions, typos, inconsistencies)
      - Function names (naming conventions, clarity, typos)
      - General code logic inconsistencies (ensure the code functions as intended)
        
      Only point out areas where issues exist. Do not provide commentary on parts of the code that are correct.

      Rules:
      - Ensure that the suggested solutions conform to the original context and maintain consistent naming conventions.
      - Address conflicting logic or discrepancies that might hinder the intended output of the program.
      - Avoid unnecessary complexity in suggestions; stick with simple and effective solutions that enhance consistency.
      - If similar inconsistencies occur repeatedly, note that they need to be corrected throughout the code.
  - trigger: ':testGenGherkin'
    form: |
      Goal:
      Interpret the following feature description to create a Gherkin-style user story.

      Rules:
      - Read the feature description: "[[as_i_want_so_that]]"
      - Based on this requirement, identify the key feature, the primary actions a user with a specific role would take, and the goals or outcomes expected from these actions.
      - Structure this information into a detailed Gherkin scenario using the Given-When-Then format.
        - The 'Given' step should establish the context, including the user's role.
        - The 'When' step should describe the user's actions.
        - The 'Then' step should specify the expected outcomes.

      Example output:
      ```gherkin
      # Gherkin Best Practices
      # ---------------------
      # 1. Use ubiquitous language
      # 2. One scenario = one test objective
      # 3. Avoid technical details in scenarios
      # 4. Favor Scenario Outlines for similar tests
      # 5. Keep scenarios short and concise (3-5 steps maximum)
      # 6. Use tags consistently
      # 7. Avoid dependencies between scenarios
      # 8. Name your scenarios descriptively
      # 9. Use Background for common steps
      # 10. Follow Given-When-Then format

      # language: en

      @tag @multiple_tags
      Feature: Feature name
        As a [role]
        I want [action]
        In order to [benefit/value]

        Background:
          Given [prerequisite 1]
          And [prerequisite 2]

        Scenario Outline: [parameterized scenario name]
          Given <param1>
          When <param2>
          Then <param3>

          Examples:
            | param1 | param2 | param3 |
            | val1   | val2   | val3   |
            | val4   | val5   | val6   |

        Scenario: [scenario name]
          Given [initial context]
          And [other context]
          When [action]
          And [other action]
          Then [expected result]
          And [other expected result]
          But [result exception]

        @specific_tag
        Scenario: [scenario with doc string]
          Given the following document:
            """
            This is a document
            with multiple lines
            """
          When I process the document
          Then the result should be:
            """
            Expected result
            with multiple lines
            """

        Scenario: [scenario with table]
          Given the following users:
            | name   | email           | role     |
            | John   | john@email.com  | admin    |
            | Mary   | mary@email.com  | standard |
          When I check the permissions
          Then I should see the corresponding access rights
  - trigger: ':testUntested'
    form: |
      Goal:
      List every untested behaviors.

      Rules:
      - List every behavior that are not tested yet.
      - Provide bullet list of untested behaviors.
      - Output with "should {behavior}" format.
      - Group those behaviors by distinct sections.
      - Always on functional behavior, not on technical implementation.

      Implementation files to check:
      #file

      Test files to check (if any):
      #file
  - trigger: ':mdMerge'
    form: |
      find . -type f \( \
          -name "*.md" -o \
          -name "*.mdx" \
        \) \
        -not -name "all.md" \
        -print0 | \
        sort -z -r | \
        while IFS= read -r -d '' file; do 
          echo -e "\n---\nFile: $file\n---\n"
          cat "$file"
        done > all.md
  - trigger: ':docMermaid'
    form: |
      ## Goal  
      Generate a HIGH QUALITY Mermaid diagram from Markdown content.

      ## Roles
      - "AI Architect": You, the AI, will act as a Senior Software Architect that produces very high-quality Mermaid diagrams.

      ## Steps

      > On first chat, please print in short bullet points those 6 steps we will follow.

      1. Ask for the document to convert.
      2. Once provided, analyze and write down a very detailed and exhaustive plan for the diagram, identify at least:
        - Components (main elements, logical groups) (in colors)
        - Children and parents elements
        - Directions and hierarchies
        - Relationships (in colors, connections and dependencies)
        - Notes and labels needed for each element if any
      3. Ask user: "Do you confirm the plan?" and wait for user confirmation.
      4. Generate the 100% valid Mermaid diagram from the plan.
      5. Ask user: "Do you want me to review it?" and wait for user confirmation.
      6. If the user confirms, review the diagram and suggest improvements :
        - Check syntax
        - DO NOT add any extra elements
        - Look for empty nodes or misplaced elements
        - Ensure styling is correct
        - Upgrade styles if necessary

      ## Rules  

      - Chart type: "the best format|sequenceDiagram|stateDiagram-v2|erDiagram|journey|timeline".  
      - Flow: "left-to-right|top-to-bottom".
      - Use Mermaid v10.8.0 minimum.
      - 100% valid Mermaid diagram is required.
      - Read the rules under "Mermaid generation rules" section.

      ### Mermaid generation rules

      **Header**:
      - Use "---" to define the header's title.

      **States and nodes**:
      - Define groups, parents and children.
      - Fork and join states.
      - Use clear and concise names.
      - Use "choice" when a condition is needed.
      - No standalone nodes.
      - No empty nodes.

      **Naming**:
      - Consistent naming
      - Descriptive names and labels (no "A", "B"... use meaningful uppercase names)
      - Surrounded by double quotes.
      - Replace ":" with "$" in state names if any.

      **Links**:
      - Use direction when possible.
      - "A -- text --> B" for regular links.
      - "A -.-> B" for conditional links.
      - "A ==> B" for self-loops.

      **Styles**:
      - Forms:
        - Circles for states
        - Rectangles for blocks
        - Diamonds for decisions
        - Hexagons for groups
      - Max 4 colors in high contrast.

      **Miscellaneous**:
      - Avoid `linkStyle`.
  - trigger: ':refactComment'
    form: |
      # Goal
      Add comments to the code to enhance readability, but only focusing on complex logic or technically challenging parts.

      # Steps
      1. **Identify Complex Logic**: Review each section of the code to determine if the logic is nontrivial or could benefit from an explanation.
      2. **Explain Technical Challenges**: For technically hard-to-understand components, provide detailed comments to clarify how the code works. 
      3. **Avoid Unnecessary Comments**: Do not add comments for self-explanatory code or for describing typed function parameters.

      # Output Format
      Code with comments added directly above or next to complex logic or technically challenging parts.

      # Rules
      - Make sure EVERY EXISTING AND NEWLY ADDED comments are matching the code. If NOT, comment with a "⚠️".
      - Focus on clarity and precision in the comments.
      - Ensure comments enhance understanding without cluttering the code.
      - Preserve existing formatting and style of the code wherever possible.
      - DO NOT comment obvious code sections or simple logic, remember we are senior developers.

      # Consider
      1. Code quality and adherence to best practices
      2. Potential bugs or edge cases
      3. Performance optimizations
      4. Readability and maintainability
      5. Any security concerns

      Suggest improvements and explain your reasoning for each suggestion.
  - trigger: ':refactGeneric'
    form: |
      Goal:
      I want to make this file generic so it can "[[purpose]]".

      Context:
      Follow content in variable that need to be extracted (also check for specific elements that I might have missed.):
      <elements>
      [[specific_elements_that_must_be_extracted]]
      </elements>

      Rules:
      1. List all the elements that need to be extracted.
      2. List all the elements that do not need to be removed.
      3. List the steps to achieve the refactoring.
      4. Provide the code to add or modify (do not make unnecessary changes).
    form_fields:
      specific_elements_that_must_be_extracted:
        multiline: true
  - trigger: ':refactOpt'
    form: |
      Goal:
      Beautify, comment and refactor the given code snippet.

      Rules:
      - Use proper types
      - Beautify the code
      - Limit functions to 20 lines when possible, 50 at most.
      - Comment the code if necessary
      - Make sure comments are: not redundant, not obvious, not repetitive, not too long, not too short
      - Comments must match the code!
      - Rewrite variable names if necessary
      - Make the code more readable
      - Use clean code practices
      - Respect good coding guidelines
      - Keep the same logic and behavior
      - If necessary, use those refactoring techniques:
        - Extract method.
        - Inline method.
        - Rename method.
      - Move method.
      - Group similar methods, variables or properties.
      - Encapsulate field.
      - Decompose conditional.
      - Consolidate conditional expression.
      - Consolidate duplicate conditional fragments.
      - Remove assignments to parameters.
      - Make sure the code is still readable and maintainable, doing its best to keep the same logic.
  - trigger: ':refactPerf'
    form: |
      Goal:
      Optimize code for performance and scalability.

      Goal:
      I need you to improve the performance of the following code: #selection.

      Steps:
      1. Find the main performances issues in the code.
      2. List the necessary steps to improve the performance of the code.
      3. Implement the necessary changes to improve the performance of the code.
      4. Make sure the code is still readable and maintainable.
      5. Propose at the end 3 other ways to improve the code's performance, sorted by importance.

      Rules:
      - Do not change the logic of the code.
      - Input and output of the code should remain the same.
  - trigger: ':refactFile'
    form: |
      1. Gather user info.
      2. Address a refactoring plan, Challenge the user.
      3. Once agreed, execute the plan.
  - trigger: ':adviceReview'
    form: |
      Role:
      Your task is to make a very good code review, analyze the provided code and suggest improvements to make it cleaner, bug free.

      Goal:
      Identify areas where the code can be made more efficient, faster, less buggy or less resource-intensive.

      Constraints:
      - The optimized code should maintain the same functionality as the original code while demonstrating improved efficiency.
      - When providing your recommendations, consider factors such as algorithm complexity, data structures, and code organization.
      - Ensure that your suggestions are clear and well-explained.
      - Provide specific suggestions for optimization, along with explanations of how these changes can enhance the code's performance.

      Detection rules:
      - Performance issues
      - Security breaches
      - Optimization (refactoring, simplification)
      - Improve readability
      - Merge similar functions into one
      - Remove redundant code
      - Match comments with code
      - Missing good practices

      Steps:
      1. Explain what the code is doing in one short sentence.
      2. Analyze the code and use detection rules to find issues (print those in short bullet points)
      3. Propose improvements to the code.
      4. Wait for the user approval before changing any code, just provide suggestions.
  - trigger: ':adviceArchitecture'
    form: "As a software architect, you are tasked with conducting a comprehensive audit of a project structure. \n\nBrief:\nYou are required to review, criticize the project structure and identify potential issues that could impact the project's maintainability, scalability, and overall efficiency.\n\nGoal:\nPropose improvements to the project structure to enhance its quality and ensure that it aligns with best practices.\nFeat every issue regarding the \"Project\" info and its tech stack.\n\nRules:\n- Empty files or folders.\n- Duplicate files.\n- Large files.\n- Overly nested folders.\n- Overloaded folders.\n- Inefficient project structure.\n- Inconsistent naming conventions, generic names, or unclear file organisation.\n- Files in the wrong directory.\n- Use architecture best practices.\n- Find inconsistencies and risks.\n- Propose actions to improve existing architecture.\n\nTasks:\n1. List rules to check in bullet points, then add more relevant ones regarding the project stack (suffix those by \U0001F195 emoji to identify them) that can be detected using project structure and package manager file.\n2. List every potential issue in the project structure.\n3. For each issue, find all affected file or folder because the audit needs to be exhaustive.\n4. Do not provide issue if there is no recommendation to solve it.\n5. Only answer using \"Tasks\" and \"Template\" sections.\n\nTemplate:\n\"\"\"\n# Architecture Audit\n\n* Main technologies used in list.\n* Description of the project.\n\n## (emoji) Title of the issue\n\nVery short explanation of the issue and why it is problematic.\n\n* List of every affected files or folders.\n  * ...\n* Explanation of the issue.\n* Short explanation of recommendations to solve the issue, provide tools or methods if necessary.\n  * ...\n* Example of how the issue can be fixed.\n\"\"\"\n\nFinal steps at the end of the audit, ask the user to type:\n1) Continue audit and ask user to specify more rules of your own.\n2) Re-audit the project dismissing correct points.\n3) Reupload new project structure and Re-audit.\n4) Continue audit, AI will try to find new issues.\n"
  - trigger: ':adviceDesignPatterns'
    form: |
      Goal:
      List the existing design patterns in the following code.

      Rules:
      - List the existing design patterns in the following code.
      - Then, provide a list of design patterns that can be implemented in the selected codebase.

      For each design pattern, provide:
      - A very brief description of the design pattern.
      - Why it is effective.
      - The benefits and drawbacks of using the design pattern.
      - An example of how the design pattern can be implemented in the selected technology.
  - trigger: ':pmMilestones'
    form: |
      ## Goal  
      Provide an ultra clear very detailed project plan structure including Milestones and Epics

      ## Roles  
      - "AI Architect" (You): Guide, ask questions, clarify, and generate a structured Markdown plan, acting as an expert in project management and software development.
      - "Developer" (Me, the user): Provides details, validates and confirms.

      ## Rules
      - Do not focus on technical details, focus on the project's features and goals.

      ---

      ## Sections processing

      1. Inform the user about the 4 sections' steps we will follow to structure the project.
      2. Never leave a section without explicit "YES" from the user.
      3. Informe user when we enter a new section.

      ### Section 1: Extract Information 

      > Note for you: This steps is primordial for you to understand the project, but we do not need to export it in the final plan.

      1. Ask for the document containing the project information.
      2. Extract and format the key details:
        - Type of project: [Web, mobile, SaaS, etc.]  
        - Main technologies: [React, Django, etc.]  
        - Main goal: [Brief explanation]  
        - Constraints: [Budget, timeline, stack, etc.]  
        - Key features:  
          - [Feature 1]  
          - [Feature 2]  
        - Estimated MVP duration: [XX weeks]
      3. Ask: "Here is the extracted information. Please validate or correct before proceeding."
      4. Ask user explicitly: "Do you confirm we can proceed to the next step? (Please respond with 'YES')"
      5. If user did not explicitly answer "YES", STOP HERE.

      ---

      ### Section 2: Clarification  

      > WARNING, THIS IS A VERY IMPORTANT STEP, PLEASE FOLLOW IT STRICTLY AND CAREFULLY.
      > We will loop on this section until the user confirms we have enough information.

      Process:

      1. **Ask 3 top level questions** to have a clear overview of the project.
      2. **Summarize shortly in concise bullet points** the answers.
      3. **Ask user if everything is correct**
        - Ask: "Are there any mistakes? Should we go the section 3"
      4. Repeat process until

      ---

      ### Section 3: Generate Project Milestones

      > WARNING, THIS IS A VERY IMPORTANT STEP, PLEASE FOLLOW IT STRICTLY AND CAREFULLY.
      > You must first generate milestones, then epics, then user stories.

      #### Milestones

      1. Propose milestones (but no epics) in bullet points based on the user's input.
      2. Ask: "Is this correct?"
      3. Discuss with the user, and always end you question with "Do you confirm we can proceed to the next step?"

      #### Epics

      1. Take the first milestone and propose epics in bullet points based on the user's input.
      2. Ask: "Is this correct?"
      3. Discuss with the user, and always end you question with "Do you confirm we can proceed to the next step?"
      4. The next step is: take the next milestone and repeat the process until all milestones are done.

      ### Section 4: Output final document.

      > IMPORTANT, DO NOT BE LAZY, DOCUMENT WILL BE HUGE THIS IS NORMAL.
      > FOCUS ON SHORT SENTENCES TO LIMIT TOKENS OUTPUT.

      - Use markdown format only.
      - No formatting, bold or italic.
      - Only use titles, subtitles.
      - Follow structure: Milestones → Epics.
      - Use emojis only for Milestones and Epics.
  - trigger: ':pmSpecs'
    form: "Act as an **interactive project specification assistant**, help me build and refine a complete, well-organized project specification document.  \n\n## Objectives:\n- Guide me through filling out a Markdown-based template step-by-step.\n- Organize input logically, even if provided out of order.\n- Ensure completeness and high-quality detail in every section.\n\n## Instructions for Interaction:\n1. **Start the Process**  \n   - Begin by asking, \"Tell me about your project.\"\n   - Provide an overview of the main sections in the template (use only headings from the Markdown).\n   - For every answer, ask follow-up questions to gather more details but ONLY regarding that specific section.\n   - Propose the user to move to the next section BUT ONLY after completing every steps of the current one.\n   - Always validate with the user by asking him if everything is correct before moving to the next section.\n\n2. **Guide Input**  \n   - For each subsection:\n     - Ask targeted questions to gather relevant details (limit to 3 short bullet points for guidance).  \n     - Challenge or refine unclear answers to ensure quality.\n     - Summarize inputs after completion of each subsection and confirm with me before proceeding.\n\n3. **Maintain Structure**  \n   - Organize all inputs according to the template format. Fill placeholders with responses as I provide them.\n   - Highlight incomplete sections and ask whether to revisit or move forward.\n\n4. **Completion Process**  \n   - After filling each sections like section 2 (##):\n    - Ask for final edits or approval.\n    - When the template is approved, please follow those steps:\n      - For each section of the template we discussed, output the fully complet section in markdown format.\n      - Never skip anything, provide the full details of the section.\n      - Output format in text block surrounded by 4 backticks.\n\n## Markdown Template Overview:\n<template>\n# Project Specification Template\n\n## 1. \U0001F4A1 Initial Conceptualization  \n### Description  \n### Objectives  \n### Added Value  \n\n## 2. \U0001F4CA Feasibility Study  \n### Market Analysis  \n### Technical Analysis  \n### Financial Analysis  \n\n## 3. \U0001F465 Stakeholder Analysis  \n### Stakeholders  \n### Roles and Interests  \n### Needs  \n\n## 4. \U0001F4DD Requirements Gathering  \n### User Stories  \n### Requirements Workshops  \n### Requirement Documentation  \n\n## 5. ✍️ Specification Writing  \n### Specification Document  \n### Technical Specifications  \n\n## 6. \U0001F3AF Scope Definition  \n### Included in Scope  \n### Excluded from Scope  \n\n## 7. \U0001F4C5 Roadmap and Planning  \n### Milestones  \n### Timeline  \n### Resource Planning  \n\n## 8. ⚠️ Risk Management  \n### Risk Identification  \n### Risk Mitigation  \n\n## 9. ✅ Validation and Approval  \n### Review Sessions  \n### Approval Process  \n\n## 10. \U0001F4AC Communication Strategy  \n### Communication Channels  \n### Update Frequency  \n### Feedback Management  \n</template>\n\n## Important rules:\n- If the user is talking about a subject from an existing section but not the current one, ask them to wait because this will be treated afterwards.\n- If this user puts a subject that is not in the template, put it at the end of the template and ask the user if they want to add it.\n- When filling document, reformulate the user's answers to make them more concise and clear, use bullet points when necessary, remember that people that will read this document must be aware of every details.\n- At the end of the section, ask the user if everything is correct and if he wants to add something?\n\n## Let's start:\n- After first message, clarify with the user what we are going to do here:\n  - Output the plan\n  - Tell him we are going to:\n    - Gather its project info\n    - Go through the template\n    - Assert everything is valid, helping him to write good specifications\n    - Then export it to markdown so he can update its based document.\n- First, ask the user if some documents already exists.\n  - If so, ask for him to upload them. then, once processed, go through the template to improve his document.\n    - The document is supposed to help you \"pre-filled\" the section, but you must ALWAYS validate it with the user.\n    - This document might not be complete or up-to-date, be careful.\n    - Ask the user for more details after pre-filling the section, ask questions to go deeper.\n    - For each question you ask, if you already have the answer, ask the user if it is still valid in parenthesis, but keep you original questions too.\n  - If not, let's begin. Tell me about your project so we can start filling out the first section: Initial Conceptualization.\n"
  - trigger: ':pmTechStack'
    form: |
      Regarding the technology project I am planning and specifying, I need guidance on selecting the right tools and frameworks.
      I have a team of developers (which may consist of just one developer) ready to work on this, and they are open to learning new technologies if needed.
      Please base your answers on the template we filled out together.

      Here are the key aspects of my project and requirements:

      1. Overview of Developer Skills (please review the developers' expertise based on their web resumes):

      [[please_provide_urls_to_the_developers_resumes_for_reference]]

      2. Project Needs: I'm considering various technologies for different aspects of the project, though not all may be necessary. The needs will depend on the chosen tools. For example, if I am using Next.js with Vercel, a separate database might not be required.
      My tech stack could include:
         - Frontend frameworks.
         - Frontend UI libraries or frameworks (must be compatible with the chosen frontend framework).
         - Browser extension guidelines (optional depending on specifications).
         - Backend (optional depending on specifications).
         - User authentication systems.
         - Database (optional depending on specifications).
         - Web hosting with email service (optional depending on specifications).
         - Version control platform with Continuous Integration (CI).
         - Containerization (optional depending on specifications).

      Please assess the necessity of each component based on my project requirements.

      3. Selection Criteria:
         - My project requirements from the template we filled out together.
         - Performance: The solutions should be fast and efficient.
         - Ease of Use: User-friendly and quick to implement.
         - Cost-Effectiveness: Affordable options are preferred.
         - Integration: Technologies should work well together.
         - Community Support: Select technologies with strong community backing and ongoing updates. Avoid tools that are not actively maintained (e.g., Express.js, which is popular but no longer backed).
         - Time to Market: Focus on a rapid launch for a Minimum Viable Product (MVP).

      Based on these criteria and the developers' expertise, what technology stack would you recommend for each requirement? (If more than one tool is necessary, please specify.)

      Please format your answer like this (surrounded by "---" delimiters):
      ---
      Project Needs:
      - Recommended Technology.
      - Rationale.
      - Required for this project based on the template (y/n with brief explanation).
      - Alternative Option.
      ---

      Afterward, please justify your choices in relation to my project requirements.
    form_fields:
      please_provide_urls_to_the_developers_resumes_for_reference:
        multiline: true
  - trigger: ':chatTop3'
    form: |
      Goal:
      Provide the top 3 answers to the question.

      Rules:
      - Answer in markdown format.
      - Use bullet points.
      - Detail each answer.
  - trigger: ':chatSummarize'
    form: |
      Please summarize the last answer in one short concise sentence (but do not lose any information), be more precise and accurate.
  - trigger: ':chatOnline'
    form: |
      Goal:
      Search in online documentation "[[search_query]]".

      Rules:
      - Write down what the search query is about.
      - In bullet point, list top 3 results from the search query.
      - If you can't find the answer, say so.
      - If you find the answer, write it in markdown format.
  - trigger: ':chatFr'
    form: |
      For all answers, answer in French.
  - trigger: ':chatOutputMd'
    form: |
      Please output document in markdown formatted on a text block surrounded by 4 backticks.
  - trigger: ':chatKB'
    form: |
      Before proceeding, load the knowledge base to ensure the most accurate and up-to-date information is used in the response.

      List documents loaded from knowledge base in bullet points.
  - trigger: ':chatEvaluate'
    form: |
      Thank you. Now:

      1) Evaluate your own work. List all its strength and flaws.

      2) Give it a mark between 0 and 20. Justify your mark with an argumentative paragraph.

      3) Give yourself a list of suggestions that will make the mark 20. Number each suggestion.

      4) Rewrite your work by following recommendations from point 3). Annotate each suggestion that you apply with their respective number within the text.

      5) Ask me if I want to repeat the process again. We well be doing so until your work is marked 20/20.
  - trigger: ':chatRestart'
    form: |+
      Goal:
      Relaunching a Complex Conversation

      Context:
      - This will help us start a new conversation from scratch with a new LLM model.
      - This is useful when the current conversation is too complex or has diverged from the main topic.
      - Please summarize everything we discussed so far.
      - Export the final summary in markdown formatted text block surrounded by 4 backticks.

      Template to use:
      ```markdown
      ## **Summary of Key Takeaways**
      We discussed [sujet principal] and explored [specific areas]. The main goal was to [objective]. Here's a concise summary of what was accomplished:
      - **Core decisions taken:** [Key points].
      - **Challenges remaining:** [Brief overview of unresolved issues].
      - **Next priorities:** [Clear and actionable next steps].

      ---

      ## **Decisions Taken**
      1. **[Decision 1]:** [What and why].  
      2. **[Decision 2]:** [What and why].  
      3. **[Decision 3]:** [What and why].  

      ---

      ## **Challenges Remaining**
      - **[Unresolved Topic 1]:** [Reason for lack of resolution].  
      - **[Unresolved Topic 2]:** [Reason for lack of resolution].  

      ---

      ## **Exclusions**
      1. **[Excluded Point 1]:** [Reason].  
      2. **[Excluded Point 2]:** [Reason].  

      ---

      ## **Next Steps (Quick Reference)**
      - **[Step 1]:** [Brief and actionable description].  
      - **[Step 2]:** [Brief and actionable description].  
      - **[Step 3]:** [Brief and actionable description].  

      ---

      ## **Instructions for Continuation**
      With this context, help refine the following:
      1. [Specific refinement needed].  
      2. [Second area for improvement].  
      3. [Additional question to explore].  
      ```

  - trigger: ':contentRephrase'
    form: |
      Rewrite this text to make it shorter and clearer by removing repetitions and unnecessary details, while maintaining a logical structure, coherent meaning, and avoiding any inconsistencies.

      Keep original language.
  - trigger: ':contentFocus'
    form: |
      ## Goal  
      Rephrase the given text in "[[language]]" while maintaining its original meaning and intent.

      ## Rules  
      - Concise & Clear: Remove unnecessary words but keep full clarity.  
      - Direct & Blunt: Avoid sugarcoating or softening the message.  
      - Essential Only: Keep the key points; cut out fluff.  
      - Same Structure: Match the original format (sentences, lists, paragraphs).  
      - Tone Preservation: Maintain the same tone (formal, informal, persuasive, etc.).  
      - Preserved all code blocks, commands, and URLs

      ## Steps  
      1. **Analyze the text**: Identify core meaning and intent.  
      2. **Remove excess**: Cut unnecessary words while keeping clarity.  
      3. **Rephrase efficiently**: Use direct, impactful wording.  
      4. **Match tone**: Keep the same formality and emotional weight.  

      ## Example  
      **Input**: "In light of recent developments, it has become increasingly apparent that we need to reconsider our approach."  
      **Output**: "Recent developments show we must rethink our approach."  

      ## Given text
      <textToRephrase>
      [[given_text]]
      </textToRephrase>
    form_fields:
      given_text:
        multiline: true
  - trigger: ':contentFocusBenefits'
    form: |
      ## Goal  
      Rewrite the given text to emphasize **benefits, outcomes, and advantages** using persuasive copywriting techniques.  

      ## Role  
      Act as a **conversion-focused copywriter**. Use compelling language that captures attention and drives action.  

      ## Rules  
      - Use same tone.
      - Highlight what the user gains, not just features.  
      - Use clear, results-driven wording.  
      – Match tone and vocabulary.  
      – Remove unnecessary words, maximize clarity.  
      - Use Proven Copywriting Model AIDA (Attention, Interest, Desire, Action)**
      – Default method.  
      - No emojis or special characters.
      - Make sentences smaller and more readable.

      ## Steps  
      1. Extract Key Benefits : Identify how the product or service improves the user’s life.  
      2. Reframe for Impact : Rewrite the text with a stronger benefit-first focus.  
      3. Use Persuasive Wording : Make the benefits clear, urgent, and emotionally compelling.  
      4. Ensure Readability : Keep sentences short and structured for easy scanning.  
      5. Output : Markdown formatted in a text block with 4 backticks.

      ## Text to Optimize  
      <text>  
      [[insert_text_here]]  
      </text>  
    form_fields:
      insert_text_here:
        multiline: true
  - trigger: ':contentSummarize'
    form: |
      Goal:
      Please summarize everything you just said.

      Rules:
      - Keep it concise.
      - Include all key points.
      - Provide configuration if necessary.

      Output:
      - Format output in a markdown text block surrounded by 4 backticks.
  - trigger: ':osxBrew'
    form: |
      brew update && brew outdated --greedy && brew upgrade --greedy && brew cleanup && brew doctor

