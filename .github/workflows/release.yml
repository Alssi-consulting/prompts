name: Release Version

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Permet de lancer manuellement

jobs:
  release:
    runs-on: ubuntu-22.04
    permissions:
      contents: write  # Needed for creating commits, tags, and releases

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all tags and branches

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Extract & Increment Version (SemVer)
        shell: bash
        run: |
          # Get current version from package.json
          current_version=$(jq -r '.version' package.json)
          
          # Split version into array
          major=$(echo "$current_version" | cut -d. -f1)
          minor=$(echo "$current_version" | cut -d. -f2)
          patch=$(echo "$current_version" | cut -d. -f3)
          
          # Increment patch version
          new_patch=$((patch + 1))
          new_version="$major.$minor.$new_patch"
          
          # Update package.json
          jq --arg version "$new_version" '.version = $version' package.json > tmp.json
          mv tmp.json package.json
          
          # Update version with debug output
          echo "Current version in manifest:"
          grep "version:" espanso/_manifest.yml
          
          echo "Attempting to update to version: $new_version"
          sed -i -E "s/version: '?([0-9]+\.[0-9]+\.[0-9]+)'?/version: '$new_version'/" espanso/_manifest.yml
          
          echo "New version in manifest:"
          grep "version:" espanso/_manifest.yml
          
          # Verify the change was successful
          if ! grep -q "version: '$new_version'" espanso/_manifest.yml; then
            echo "Error: Version update failed"
            exit 1
          fi
          
          # Export for other steps
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "Version bumped from $current_version to $new_version"

      - name: Generate Changelog (Commits since last tag)
        run: |
          # Try to get the last tag, if it fails, get all commits
          if ! last_tag=$(git describe --tags --abbrev=0 2>/dev/null); then
            echo "No previous tags found - this is the first release"
            last_tag=$(git rev-list --max-parents=0 HEAD)  # Get the first commit
            changelog=$(git log --pretty=format:"- %s")
          else
            echo "Last tag: $last_tag"
            changelog=$(git log --pretty=format:"- %s" "$last_tag"..HEAD)
          fi
          
          if [ -z "$changelog" ]; then
            changelog="No significant changes."
          fi

          echo "$changelog" > changelog.txt
          echo "Changelog:"
          cat changelog.txt

          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          cat changelog.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Commit & Push Version Bump
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json espanso/_manifest.yml
          git commit -m "ðŸ”– Bump version to ${{ env.NEW_VERSION }}"
          git push

      - name: Create Git Tag
        run: |
          git tag "v${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Prepare release body with proper escaping
          BODY=$(cat << EOF
          ## ðŸš€ Release v${{ env.NEW_VERSION }}

          **Changelog:**
          ${{ env.CHANGELOG }}
          EOF
          )

          # Create release using GitHub API
          curl \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d @- << EOF
          {
            "tag_name": "v${{ env.NEW_VERSION }}",
            "name": "Release v${{ env.NEW_VERSION }}",
            "body": $(echo "$BODY" | jq -R -s .),
            "draft": false,
            "prerelease": false
          }
          EOF
